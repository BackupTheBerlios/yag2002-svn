/****************************************************************
 *  YAG2002 (http://yag2002.sourceforge.net)
 *  Copyright (C) 2005-2007, A. Botorabi
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1 as published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this program; if not, write to the Free
 *  Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 ****************************************************************/

/*###############################################################
 # networking for mail transfer
 #
 # this class implements the networking functionality for the mailbox
 #
 #
 #   date of creation:  29/07/2008
 #
 #   author:            boto (botorabi at users.sourceforge.net)
 #
 #
 ################################################################*/

#ifndef _VRC_MAILBOXNETWORKING_H_
#define _VRC_MAILBOXNETWORKING_H_

#include <vrc_main.h>
#include "networkingRoles/_RO_MailboxNetworking.h"
#include "database/vrc_basemailbox.h"


namespace vrc
{

//! Networking class for delivering mails.
class MailboxNetworking : _RO_DO_PUBLIC_RO( MailboxNetworking )
{
    public:

                                                    MailboxNetworking();

        virtual                                    ~MailboxNetworking();

        //! Object has been created.
        void                                        PostObjectCreate();

        //! Callback class for mailbox responses used on client.
        class CallbackMailboxResponse
        {
            public:

                                                    CallbackMailboxResponse() {}

                virtual                             ~CallbackMailboxResponse() {}

                //! Get the mailbox request response. The response string and status are generated by the mail server.
                virtual void                        mailboxResponse( const BaseMailbox::Content& mailcontent, unsigned int status, const std::string& response ) = 0;
        };

        //! Set the callback for delivering the mailbox request results.
        void                                        setMailboxResponseCallback( CallbackMailboxResponse* p_cb );

        //! The response of the functions below is delivered by the callback above, when arrived from server.
        //-------------------------------------------------------------------------------------------------//

        //! Get mail headers with given attribute (see Content::Attributes), they are stored in 'headers' without body.
        void                                        getMailHeaders( unsigned int userID, unsigned int attribute );

        //! Get mail with given ID.
        void                                        getMail( unsigned int userID, unsigned int mailID );

        //! Send mail
        void                                        sendMail( unsigned int userID, const BaseMailbox::Content& mailcontent );

        //! Delete mail with given ID.
        void                                        deleteMail( unsigned int userID, unsigned int mailID );

        //! Move mail with given ID to 'destfolder'. The destination folder must exist.
        void                                        moveMail( unsigned int userID, unsigned int mailID, const std::string& destfolder );

        //! Create a new mail folder.
        void                                        createMailFolder( unsigned int userID, const std::string& folder );

        //! Delete the given mail folder.
        void                                        deleteMailFolder( unsigned int userID, const std::string& folder );

    protected:

        // Internal RN Overrides, do not use these methods!
        //-----------------------------------------------//

        //! Called by client for requesting a mail command such as move, delete, get mail headers, etc.
        void                                        RPC_RequestMailCommand( tMailRequest request );

        //! Called by client for sending an email.
        void                                        RPC_RequestSendMail( unsigned int userID, tMailContent content );

        //! Called by server for responding to a request.
        void                                        RPC_Response( tMailRequest );

        //! Called by server to deliver mails to clients. This can be called only by game server.
        void                                        RPC_SendMail( tMailContent content );

        //! Mailbox results callback
        CallbackMailboxResponse*                    _p_mailboxResponseCallback;

    friend class _MAKE_RO( MailboxNetworking );
};

} // namespace vrc

#endif //_VRC_MAILBOXNETWORKING_H_
